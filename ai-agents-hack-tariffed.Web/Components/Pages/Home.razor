@page "/"
@using ai_agents_hack_tariffed.ApiService
@using Markdig
@inject IServiceProvider ServiceProvider
@rendermode InteractiveServer
@attribute [StreamRendering(true)]

@inject AgentApiClient AgentApi

<PageTitle>TARIFFED! AI Agents Hackathon 2025</PageTitle>

<div class="header relative overflow-auto bg-clip-text">
  <div class="mx-auto flex flex-col font-bold font-sans">
    <h1 class="text-8xl flex items-center justify-center bg-gradient-to-r from-cyan-300 to-blue-800 bg-clip-text text-transparent tracking-tighter">
      Tariffed
    </h1>
    <h2 class="flex items-center justify-center text-4xl bg-gradient-to-r from-gray-600 to-gray-800 bg-clip-text text-transparent pb-2">AI Agents Hackathon 2025</h2>
  </div>
  
</div>

<div class="mx-auto mt-12 flex max-w-2xl h-12 items-center overflow-hidden rounded-lg bg-white shadow-lg/30">
    <div class="grid h-full w-12 place-items-center text-gray-400">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        </svg>
    </div>

    <form class="w-full" @onsubmit='() => search(searchQuery)'>
        <InputText @bind-Value=searchQuery
                   class="text-lg w-full font-semibold text-gray-800 outline-none"
                id="search"
                placeholder="See if your favorite stuff just got more expensive" />
    </form>
</div>

<div class="suggestions @suggestions mx-auto mx-auto grid grid-cols-3 grid-rows-1 gap-4 max-w-2xl max-w-2xl pt-6">
    <button @onclick='() => search("silk")' class="bg-teal-300 hover:bg-teal-400 text-gray-800 font-bold py-2 px-4 shadow-sm/50 rounded-md inline-flex items-center cursor-pointer">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6"><path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m5.231 13.481L15 17.25m-4.5-15H5.625c-.621 0-1.125.504-1.125 1.125v16.5c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Zm3.75 11.625a2.625 2.625 0 1 1-5.25 0 2.625 2.625 0 0 1 5.25 0Z"></path></svg>

        <span>Search 'silk'</span>
    </button>

    <button @onclick='() => search("Brie cheese")' class="bg-gray-100 hover:bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded inline-flex items-center cursor-pointer">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m5.231 13.481L15 17.25m-4.5-15H5.625c-.621 0-1.125.504-1.125 1.125v16.5c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Zm3.75 11.625a2.625 2.625 0 1 1-5.25 0 2.625 2.625 0 0 1 5.25 0Z" />
        </svg>

        <span>Brie cheese</span>
    </button>

    <button @onclick='() => search("Copic markers")' class="bg-purple-300 hover:bg-purple-400 text-gray-800 font-bold py-2 px-4 rounded inline-flex items-center cursor-pointer">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m5.231 13.481L15 17.25m-4.5-15H5.625c-.621 0-1.125.504-1.125 1.125v16.5c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Zm3.75 11.625a2.625 2.625 0 1 1-5.25 0 2.625 2.625 0 0 1 5.25 0Z" />
        </svg>

        <span>Copic markers</span>
    </button>
</div>

<div class="whatshappening @activeClassHappening mx-auto max-w-5xl mt-8 p-12 text-center">
    <h3 class="mx auto text-3xl text-white mb-6">
        What's happening?
    </h3>
    <img src="whatshappening.png" class="" alt="A diagram displaying how the AI agents work">
</div>

<div class="mx-auto mt-4 flex max-w-5xl rounded-lg px-6 py-8 subpixel-antialiased">
    <div class="water-round-container @activeClass1 bg-white">
        <div class="inner">
            <div class="water-wave1 bg-gradient-to-r from-@flag1-600 to-@flag1-900"></div>
            <div class="water-wave2 bg-@flag2-600"></div>
            <div class="water-wave3 bg-gradient-to-r from-@flag3-500 to-@flag3-800"></div>
            <div class="round-text">
                <div class="value mb-5">@primaryProducer</div>
                <div class="text-white text-lg font-bold pt-2 pb-4 bg-purple-600">
                Primary Producer
                <p class="text-xs font-light leading-2 mt-1">Where most imports come from</p>
                </div>
            </div>
        </div>
        <button type="button" class="mt-20 inline-flex items-center rounded-md bg-indigo-500 px-4 py-2 mt-4 text-sm leading-6 font-semibold text-white transition duration-150 ease-in-out hover:bg-indigo-400" disabled="">
            <svg class="mr-3 -ml-1 size-5 animate-spin text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Agent Working
        </button>
    </div>

    <div class="water-round-container @activeClass2 bg-white">
        <div class="inner">
            <div class="round-text">
                <div class="value mb-6">@tariffRate</div>
                <div class="text-white text-lg font-bold pt-2 pb-4 bg-purple-600">
                Tax due upon import
                <p class="text-xs font-light leading-2 mt-1">As a percentage of value</p>
                </div>
            </div>
            <div class="water-wave1 bg-gradient-to-r from-cyan-300 to-green-500"></div>
            <div class="water-wave2 bg-cyan-300"></div>
            <div class="water-wave3 bg-gradient-to-r from-blue-700 to-cyan-300"></div>
        </div>
        <button type="button" class="mt-20 inline-flex items-center rounded-md bg-indigo-500 px-4 py-2 mt-4 text-sm leading-6 font-semibold text-white transition duration-150 ease-in-out hover:bg-indigo-400" disabled="">
            <svg class="mr-3 -ml-1 size-5 animate-spin text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Agent Working
        </button>
    </div>

    <div class="water-round-container @activeClass3 bg-white">
        <div class="inner">
            <div class="round-text">
                <div class="value mb-6">@percentOfTrade</div>
                <div class="text-white text-lg font-bold pt-2 pb-4 bg-purple-600">
                Percent of Trade
                <p class="text-xs font-light leading-2 mt-1">Larger partners affect your wallet</p>
        
                </div>
            </div>
            <div class="water-wave1 bg-gradient-to-r from-cyan-300 to-green-500"></div>
            <div class="water-wave2 bg-cyan-300"></div>
            <div class="water-wave3 bg-gradient-to-r from-blue-700 to-cyan-300"></div>
        </div>
        <button type="button" class="mt-20 inline-flex items-center rounded-md bg-indigo-500 px-4 py-2 mt-4 text-sm leading-6 font-semibold text-white transition duration-150 ease-in-out hover:bg-indigo-400" disabled="">
            <svg class="mr-3 -ml-1 size-5 animate-spin text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Agent Working
        </button>
    </div>
</div>

@* Substitute Goods *@
<div class="substitute @activeSubstitute mx-auto mt-12 max-w-2xl bg-gradient-to-r from-cyan-700 to-cyan-500 p-4 rounded-xl transition-opacity shadow-lg/50">
    <h3 class="text-4xl block font-normal text-white">Substitute Goods</h3>
    <p class="text-xs text-white">
        Powered by <strong>Grounding with Bing Search</strong>
    </p>
    <p class="text-white mt-6">
        @((MarkupString)Markdown.ToHtml(searchResults))
    </p>
</div>

@* Error message *@
<div class="error @activeError mx-auto mt-12 max-w-2xl bg-gradient-to-r from-red-500 to-red-400 rounded-lg p-6 transition-opacity border-red-200">
    <strong class="text-4xl block mb-2 text-white">Oops</strong>
    <p class="font-medium text-white">
        @((MarkupString)errorMessage)
    </p>
    <p class="font-light text-white mt-6">
        <div @onclick='() => search(searchQuery)' href="" class="hover:underline cursor-pointer">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0 3.181 3.183a8.25 8.25 0 0 0 13.803-3.7M4.031 9.865a8.25 8.25 0 0 1 13.803-3.7l3.181 3.182m0-4.991v4.99" />

            </svg>
            Try "@searchQuery" again
        </div>
    </p>
</div>

@code {
    private bool working = false;

    private const string ACTIVE_CLASS = "active shadow-lg/50";
    private const string LOADING_CLASS = "loading";
    private const string FLAG_COLOR = "cyan";
    private const string INIT = "init";

    private string primaryProducer = string.Empty;
    private string tariffRate = string.Empty;
    private string activeClass1 = INIT;
    private string activeClass2 = INIT;
    private string activeClass3 = INIT;
    private string activeClassHappening = string.Empty;

    private string searchResults = string.Empty;

    private string percentOfTrade = string.Empty;

    private string suggestions = string.Empty;

    private string errorMessage = string.Empty;
    private string activeError = string.Empty;

    private string activeSubstitute = "hidden";

    private string flag1 = FLAG_COLOR;
    private string flag2 = FLAG_COLOR;
    private string flag3 = FLAG_COLOR;

    private PrimaryProducerApiResponse? response;
    private string searchQuery = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task search(string text)
    {
        if (working) return;
        working = true;

        if (text.Trim().Length == 0) return;

        activeError = string.Empty;
        searchQuery = text;
        Loading();

        var response = await AgentApi.Get(searchQuery);


        await Task.Delay(100).ContinueWith(_ => { working = false; });

        if (response is null) return;

        SetError(response);
        SetPrimaryProducer(response);
        SetTariff(response);
        SetSubstitutes(response);
        SetSpecial(response);
    }

    private void SetPrimaryProducer(AggregateResponse response)
    {
        if (response.PrimaryProducerApiResponse is null) return;

        primaryProducer = response.PrimaryProducerApiResponse.TariffRate.Country;
        flag1 = response.PrimaryProducerApiResponse.TariffRate.FlagColor1;
        flag2 = response.PrimaryProducerApiResponse.TariffRate.FlagColor2;
        flag3 = response.PrimaryProducerApiResponse.TariffRate.FlagColor3;
        activeClass1 = ACTIVE_CLASS;
    }

    private void SetTariff(AggregateResponse response)
    {
        if (response.TariffRateResponse is null) return;

        tariffRate = response.TariffRateResponse.Message;
        activeClass2 = ACTIVE_CLASS;
    }

    private void SetSpecial(AggregateResponse response)
    {
        if (response.PercentOfTradeResponse is null) return;

        percentOfTrade = response.PercentOfTradeResponse.Record.PercentOfTrade;
        activeClass3 = ACTIVE_CLASS;
    }

    private void SetSubstitutes(AggregateResponse response)
    {
        if (response.SubstituteResponse is null) return;

        searchResults = response.SubstituteResponse.Message;
        activeSubstitute = string.Empty;
    }

    private void Loading()
    {
        activeClass1 = LOADING_CLASS;
        activeClass2 = LOADING_CLASS;
        activeClass3 = LOADING_CLASS;
        activeSubstitute = "hidden";
        activeClassHappening = LOADING_CLASS;
        suggestions = "hidden";
    }

    private void SetError(AggregateResponse response)
    {
        if (response.PrimaryProducerApiResponse is null ||
            response.TariffRateResponse is null ||
            response.SubstituteResponse is null) return;

        if (!(response.PrimaryProducerApiResponse.ApiResponse.Success &&
            response.TariffRateResponse.Success &&
            response.SubstituteResponse.Success)) activeError = ACTIVE_CLASS;

        var producerErrorMessage = response.PrimaryProducerApiResponse?.ApiResponse.Error.Length > 0
            ? $"Producer: {response.PrimaryProducerApiResponse.ApiResponse.Error} ({response.PrimaryProducerApiResponse.ApiResponse.ThreadId})<br>"
            : string.Empty;

        var tariffErrorMessage = response.TariffRateResponse?.Error.Length > 0
        ? $"Tariff: {response.TariffRateResponse.Error} ({response.TariffRateResponse.ThreadId})<br>"
        : string.Empty;

        var subErrorMessage = response.SubstituteResponse?.Error.Length > 0
        ? $"Substitute Goods: {response.SubstituteResponse.Error} ({response.SubstituteResponse.ThreadId})<br>"
        : string.Empty;

        activeClassHappening = string.Empty;

        errorMessage = $@"
            {producerErrorMessage}
            {tariffErrorMessage}
            {subErrorMessage}
        ";
        
    }
}

<div class="text-center pt-4 w-full text-sm">Made with 🤍 by Andy Merhaut</div>